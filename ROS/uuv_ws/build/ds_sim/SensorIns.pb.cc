// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorIns.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SensorIns.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ds_sim {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Ins_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ins_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SensorIns_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SensorIns_2eproto() {
  protobuf_AddDesc_SensorIns_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SensorIns.proto");
  GOOGLE_CHECK(file != NULL);
  Ins_descriptor_ = file->message_type(0);
  static const int Ins_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, entity_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, roll_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, pitch_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, heading_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, linear_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, heave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, latitude_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, longitude_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, linear_accel_),
  };
  Ins_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ins_descriptor_,
      Ins::default_instance_,
      Ins_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ins),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SensorIns_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ins_descriptor_, &Ins::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SensorIns_2eproto() {
  delete Ins::default_instance_;
  delete Ins_reflection_;
}

void protobuf_AddDesc_SensorIns_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_SensorIns_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_quaternion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SensorIns.proto\022\013ds_sim.msgs\032\ntime.pro"
    "to\032\016vector3d.proto\032\020quaternion.proto\"\251\003\n"
    "\003Ins\022 \n\005stamp\030\001 \002(\0132\021.gazebo.msgs.Time\022\023"
    "\n\013entity_name\030\002 \002(\t\022\020\n\010roll_deg\030\003 \002(\001\022\021\n"
    "\tpitch_deg\030\004 \002(\001\022\023\n\013heading_deg\030\005 \002(\001\022,\n"
    "\013orientation\030\006 \002(\0132\027.gazebo.msgs.Quatern"
    "ion\022/\n\020angular_velocity\030\007 \002(\0132\025.gazebo.m"
    "sgs.Vector3d\022.\n\017linear_velocity\030\010 \002(\0132\025."
    "gazebo.msgs.Vector3d\022\r\n\005heave\030\t \001(\001\022\024\n\014l"
    "atitude_deg\030\n \001(\001\022\025\n\rlongitude_deg\030\013 \001(\001"
    "\022\020\n\010altitude\030\014 \001(\001\022\'\n\010position\030\r \001(\0132\025.g"
    "azebo.msgs.Vector3d\022+\n\014linear_accel\030\016 \001("
    "\0132\025.gazebo.msgs.Vector3d", 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorIns.proto", &protobuf_RegisterTypes);
  Ins::default_instance_ = new Ins();
  Ins::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SensorIns_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SensorIns_2eproto {
  StaticDescriptorInitializer_SensorIns_2eproto() {
    protobuf_AddDesc_SensorIns_2eproto();
  }
} static_descriptor_initializer_SensorIns_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins::kStampFieldNumber;
const int Ins::kEntityNameFieldNumber;
const int Ins::kRollDegFieldNumber;
const int Ins::kPitchDegFieldNumber;
const int Ins::kHeadingDegFieldNumber;
const int Ins::kOrientationFieldNumber;
const int Ins::kAngularVelocityFieldNumber;
const int Ins::kLinearVelocityFieldNumber;
const int Ins::kHeaveFieldNumber;
const int Ins::kLatitudeDegFieldNumber;
const int Ins::kLongitudeDegFieldNumber;
const int Ins::kAltitudeFieldNumber;
const int Ins::kPositionFieldNumber;
const int Ins::kLinearAccelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins::Ins()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ds_sim.msgs.Ins)
}

void Ins::InitAsDefaultInstance() {
  stamp_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
  orientation_ = const_cast< ::gazebo::msgs::Quaternion*>(&::gazebo::msgs::Quaternion::default_instance());
  angular_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  linear_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  position_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  linear_accel_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

Ins::Ins(const Ins& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ds_sim.msgs.Ins)
}

void Ins::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stamp_ = NULL;
  entity_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roll_deg_ = 0;
  pitch_deg_ = 0;
  heading_deg_ = 0;
  orientation_ = NULL;
  angular_velocity_ = NULL;
  linear_velocity_ = NULL;
  heave_ = 0;
  latitude_deg_ = 0;
  longitude_deg_ = 0;
  altitude_ = 0;
  position_ = NULL;
  linear_accel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ins::~Ins() {
  // @@protoc_insertion_point(destructor:ds_sim.msgs.Ins)
  SharedDtor();
}

void Ins::SharedDtor() {
  entity_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stamp_;
    delete orientation_;
    delete angular_velocity_;
    delete linear_velocity_;
    delete position_;
    delete linear_accel_;
  }
}

void Ins::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ins_descriptor_;
}

const Ins& Ins::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorIns_2eproto();
  return *default_instance_;
}

Ins* Ins::default_instance_ = NULL;

Ins* Ins::New(::google::protobuf::Arena* arena) const {
  Ins* n = new Ins;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins::Clear() {
// @@protoc_insertion_point(message_clear_start:ds_sim.msgs.Ins)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Ins, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ins*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(roll_deg_, heading_deg_);
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::gazebo::msgs::Time::Clear();
    }
    if (has_entity_name()) {
      entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::gazebo::msgs::Quaternion::Clear();
    }
    if (has_angular_velocity()) {
      if (angular_velocity_ != NULL) angular_velocity_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_linear_velocity()) {
      if (linear_velocity_ != NULL) linear_velocity_->::gazebo::msgs::Vector3d::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(heave_, altitude_);
    if (has_position()) {
      if (position_ != NULL) position_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_linear_accel()) {
      if (linear_accel_ != NULL) linear_accel_->::gazebo::msgs::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ds_sim.msgs.Ins)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Time stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entity_name;
        break;
      }

      // required string entity_name = 2;
      case 2: {
        if (tag == 18) {
         parse_entity_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entity_name().data(), this->entity_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ds_sim.msgs.Ins.entity_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_roll_deg;
        break;
      }

      // required double roll_deg = 3;
      case 3: {
        if (tag == 25) {
         parse_roll_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_deg_)));
          set_has_roll_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pitch_deg;
        break;
      }

      // required double pitch_deg = 4;
      case 4: {
        if (tag == 33) {
         parse_pitch_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_deg_)));
          set_has_pitch_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading_deg;
        break;
      }

      // required double heading_deg = 5;
      case 5: {
        if (tag == 41) {
         parse_heading_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_deg_)));
          set_has_heading_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_orientation;
        break;
      }

      // required .gazebo.msgs.Quaternion orientation = 6;
      case 6: {
        if (tag == 50) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_angular_velocity;
        break;
      }

      // required .gazebo.msgs.Vector3d angular_velocity = 7;
      case 7: {
        if (tag == 58) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_linear_velocity;
        break;
      }

      // required .gazebo.msgs.Vector3d linear_velocity = 8;
      case 8: {
        if (tag == 66) {
         parse_linear_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_heave;
        break;
      }

      // optional double heave = 9;
      case 9: {
        if (tag == 73) {
         parse_heave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heave_)));
          set_has_heave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_latitude_deg;
        break;
      }

      // optional double latitude_deg = 10;
      case 10: {
        if (tag == 81) {
         parse_latitude_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_deg_)));
          set_has_latitude_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_longitude_deg;
        break;
      }

      // optional double longitude_deg = 11;
      case 11: {
        if (tag == 89) {
         parse_longitude_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_deg_)));
          set_has_longitude_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_altitude;
        break;
      }

      // optional double altitude = 12;
      case 12: {
        if (tag == 97) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_position;
        break;
      }

      // optional .gazebo.msgs.Vector3d position = 13;
      case 13: {
        if (tag == 106) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_linear_accel;
        break;
      }

      // optional .gazebo.msgs.Vector3d linear_accel = 14;
      case 14: {
        if (tag == 114) {
         parse_linear_accel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_accel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ds_sim.msgs.Ins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ds_sim.msgs.Ins)
  return false;
#undef DO_
}

void Ins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ds_sim.msgs.Ins)
  // required .gazebo.msgs.Time stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stamp_, output);
  }

  // required string entity_name = 2;
  if (has_entity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_name().data(), this->entity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_sim.msgs.Ins.entity_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entity_name(), output);
  }

  // required double roll_deg = 3;
  if (has_roll_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->roll_deg(), output);
  }

  // required double pitch_deg = 4;
  if (has_pitch_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitch_deg(), output);
  }

  // required double heading_deg = 5;
  if (has_heading_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_deg(), output);
  }

  // required .gazebo.msgs.Quaternion orientation = 6;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->orientation_, output);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 7;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->angular_velocity_, output);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 8;
  if (has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->linear_velocity_, output);
  }

  // optional double heave = 9;
  if (has_heave()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->heave(), output);
  }

  // optional double latitude_deg = 10;
  if (has_latitude_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->latitude_deg(), output);
  }

  // optional double longitude_deg = 11;
  if (has_longitude_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longitude_deg(), output);
  }

  // optional double altitude = 12;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->altitude(), output);
  }

  // optional .gazebo.msgs.Vector3d position = 13;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->position_, output);
  }

  // optional .gazebo.msgs.Vector3d linear_accel = 14;
  if (has_linear_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->linear_accel_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ds_sim.msgs.Ins)
}

::google::protobuf::uint8* Ins::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ds_sim.msgs.Ins)
  // required .gazebo.msgs.Time stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stamp_, false, target);
  }

  // required string entity_name = 2;
  if (has_entity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_name().data(), this->entity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_sim.msgs.Ins.entity_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entity_name(), target);
  }

  // required double roll_deg = 3;
  if (has_roll_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->roll_deg(), target);
  }

  // required double pitch_deg = 4;
  if (has_pitch_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitch_deg(), target);
  }

  // required double heading_deg = 5;
  if (has_heading_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_deg(), target);
  }

  // required .gazebo.msgs.Quaternion orientation = 6;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->orientation_, false, target);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 7;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->angular_velocity_, false, target);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 8;
  if (has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->linear_velocity_, false, target);
  }

  // optional double heave = 9;
  if (has_heave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->heave(), target);
  }

  // optional double latitude_deg = 10;
  if (has_latitude_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->latitude_deg(), target);
  }

  // optional double longitude_deg = 11;
  if (has_longitude_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->longitude_deg(), target);
  }

  // optional double altitude = 12;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->altitude(), target);
  }

  // optional .gazebo.msgs.Vector3d position = 13;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->position_, false, target);
  }

  // optional .gazebo.msgs.Vector3d linear_accel = 14;
  if (has_linear_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->linear_accel_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ds_sim.msgs.Ins)
  return target;
}

int Ins::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ds_sim.msgs.Ins)
  int total_size = 0;

  if (has_stamp()) {
    // required .gazebo.msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);
  }

  if (has_entity_name()) {
    // required string entity_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_name());
  }

  if (has_roll_deg()) {
    // required double roll_deg = 3;
    total_size += 1 + 8;
  }

  if (has_pitch_deg()) {
    // required double pitch_deg = 4;
    total_size += 1 + 8;
  }

  if (has_heading_deg()) {
    // required double heading_deg = 5;
    total_size += 1 + 8;
  }

  if (has_orientation()) {
    // required .gazebo.msgs.Quaternion orientation = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  if (has_angular_velocity()) {
    // required .gazebo.msgs.Vector3d angular_velocity = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  if (has_linear_velocity()) {
    // required .gazebo.msgs.Vector3d linear_velocity = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_velocity_);
  }

  return total_size;
}
int Ins::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ds_sim.msgs.Ins)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);

    // required string entity_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_name());

    // required double roll_deg = 3;
    total_size += 1 + 8;

    // required double pitch_deg = 4;
    total_size += 1 + 8;

    // required double heading_deg = 5;
    total_size += 1 + 8;

    // required .gazebo.msgs.Quaternion orientation = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);

    // required .gazebo.msgs.Vector3d angular_velocity = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);

    // required .gazebo.msgs.Vector3d linear_velocity = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_velocity_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional double heave = 9;
    if (has_heave()) {
      total_size += 1 + 8;
    }

    // optional double latitude_deg = 10;
    if (has_latitude_deg()) {
      total_size += 1 + 8;
    }

    // optional double longitude_deg = 11;
    if (has_longitude_deg()) {
      total_size += 1 + 8;
    }

    // optional double altitude = 12;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional .gazebo.msgs.Vector3d position = 13;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .gazebo.msgs.Vector3d linear_accel = 14;
    if (has_linear_accel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_accel_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ds_sim.msgs.Ins)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ins* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ds_sim.msgs.Ins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ds_sim.msgs.Ins)
    MergeFrom(*source);
  }
}

void Ins::MergeFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ds_sim.msgs.Ins)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::gazebo::msgs::Time::MergeFrom(from.stamp());
    }
    if (from.has_entity_name()) {
      set_has_entity_name();
      entity_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_name_);
    }
    if (from.has_roll_deg()) {
      set_roll_deg(from.roll_deg());
    }
    if (from.has_pitch_deg()) {
      set_pitch_deg(from.pitch_deg());
    }
    if (from.has_heading_deg()) {
      set_heading_deg(from.heading_deg());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::gazebo::msgs::Quaternion::MergeFrom(from.orientation());
    }
    if (from.has_angular_velocity()) {
      mutable_angular_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.angular_velocity());
    }
    if (from.has_linear_velocity()) {
      mutable_linear_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_velocity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heave()) {
      set_heave(from.heave());
    }
    if (from.has_latitude_deg()) {
      set_latitude_deg(from.latitude_deg());
    }
    if (from.has_longitude_deg()) {
      set_longitude_deg(from.longitude_deg());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_position()) {
      mutable_position()->::gazebo::msgs::Vector3d::MergeFrom(from.position());
    }
    if (from.has_linear_accel()) {
      mutable_linear_accel()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_accel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ds_sim.msgs.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins::CopyFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ds_sim.msgs.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity_->IsInitialized()) return false;
  }
  if (has_linear_velocity()) {
    if (!this->linear_velocity_->IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_linear_accel()) {
    if (!this->linear_accel_->IsInitialized()) return false;
  }
  return true;
}

void Ins::Swap(Ins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins::InternalSwap(Ins* other) {
  std::swap(stamp_, other->stamp_);
  entity_name_.Swap(&other->entity_name_);
  std::swap(roll_deg_, other->roll_deg_);
  std::swap(pitch_deg_, other->pitch_deg_);
  std::swap(heading_deg_, other->heading_deg_);
  std::swap(orientation_, other->orientation_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(linear_velocity_, other->linear_velocity_);
  std::swap(heave_, other->heave_);
  std::swap(latitude_deg_, other->latitude_deg_);
  std::swap(longitude_deg_, other->longitude_deg_);
  std::swap(altitude_, other->altitude_);
  std::swap(position_, other->position_);
  std::swap(linear_accel_, other->linear_accel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ins_descriptor_;
  metadata.reflection = Ins_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins

// required .gazebo.msgs.Time stamp = 1;
bool Ins::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins::clear_stamp() {
  if (stamp_ != NULL) stamp_->::gazebo::msgs::Time::Clear();
  clear_has_stamp();
}
const ::gazebo::msgs::Time& Ins::stamp() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
::gazebo::msgs::Time* Ins::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.stamp)
  return stamp_;
}
::gazebo::msgs::Time* Ins::release_stamp() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.stamp)
  clear_has_stamp();
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
void Ins::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.stamp)
}

// required string entity_name = 2;
bool Ins::has_entity_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins::set_has_entity_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins::clear_has_entity_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins::clear_entity_name() {
  entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_name();
}
 const ::std::string& Ins::entity_name() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.entity_name)
  return entity_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ins::set_entity_name(const ::std::string& value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.entity_name)
}
 void Ins::set_entity_name(const char* value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ds_sim.msgs.Ins.entity_name)
}
 void Ins::set_entity_name(const char* value, size_t size) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ds_sim.msgs.Ins.entity_name)
}
 ::std::string* Ins::mutable_entity_name() {
  set_has_entity_name();
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.entity_name)
  return entity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Ins::release_entity_name() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.entity_name)
  clear_has_entity_name();
  return entity_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ins::set_allocated_entity_name(::std::string* entity_name) {
  if (entity_name != NULL) {
    set_has_entity_name();
  } else {
    clear_has_entity_name();
  }
  entity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_name);
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.entity_name)
}

// required double roll_deg = 3;
bool Ins::has_roll_deg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins::set_has_roll_deg() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins::clear_has_roll_deg() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins::clear_roll_deg() {
  roll_deg_ = 0;
  clear_has_roll_deg();
}
 double Ins::roll_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.roll_deg)
  return roll_deg_;
}
 void Ins::set_roll_deg(double value) {
  set_has_roll_deg();
  roll_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.roll_deg)
}

// required double pitch_deg = 4;
bool Ins::has_pitch_deg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ins::set_has_pitch_deg() {
  _has_bits_[0] |= 0x00000008u;
}
void Ins::clear_has_pitch_deg() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ins::clear_pitch_deg() {
  pitch_deg_ = 0;
  clear_has_pitch_deg();
}
 double Ins::pitch_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.pitch_deg)
  return pitch_deg_;
}
 void Ins::set_pitch_deg(double value) {
  set_has_pitch_deg();
  pitch_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.pitch_deg)
}

// required double heading_deg = 5;
bool Ins::has_heading_deg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ins::set_has_heading_deg() {
  _has_bits_[0] |= 0x00000010u;
}
void Ins::clear_has_heading_deg() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ins::clear_heading_deg() {
  heading_deg_ = 0;
  clear_has_heading_deg();
}
 double Ins::heading_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.heading_deg)
  return heading_deg_;
}
 void Ins::set_heading_deg(double value) {
  set_has_heading_deg();
  heading_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.heading_deg)
}

// required .gazebo.msgs.Quaternion orientation = 6;
bool Ins::has_orientation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ins::set_has_orientation() {
  _has_bits_[0] |= 0x00000020u;
}
void Ins::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ins::clear_orientation() {
  if (orientation_ != NULL) orientation_->::gazebo::msgs::Quaternion::Clear();
  clear_has_orientation();
}
const ::gazebo::msgs::Quaternion& Ins::orientation() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::gazebo::msgs::Quaternion* Ins::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::gazebo::msgs::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.orientation)
  return orientation_;
}
::gazebo::msgs::Quaternion* Ins::release_orientation() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Ins::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.orientation)
}

// required .gazebo.msgs.Vector3d angular_velocity = 7;
bool Ins::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ins::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000040u;
}
void Ins::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ins::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_angular_velocity();
}
const ::gazebo::msgs::Vector3d& Ins::angular_velocity() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
::gazebo::msgs::Vector3d* Ins::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.angular_velocity)
  return angular_velocity_;
}
::gazebo::msgs::Vector3d* Ins::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.angular_velocity)
  clear_has_angular_velocity();
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void Ins::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.angular_velocity)
}

// required .gazebo.msgs.Vector3d linear_velocity = 8;
bool Ins::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ins::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000080u;
}
void Ins::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ins::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_velocity();
}
const ::gazebo::msgs::Vector3d& Ins::linear_velocity() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_ : *default_instance_->linear_velocity_;
}
::gazebo::msgs::Vector3d* Ins::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.linear_velocity)
  return linear_velocity_;
}
::gazebo::msgs::Vector3d* Ins::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.linear_velocity)
  clear_has_linear_velocity();
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
void Ins::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.linear_velocity)
}

// optional double heave = 9;
bool Ins::has_heave() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ins::set_has_heave() {
  _has_bits_[0] |= 0x00000100u;
}
void Ins::clear_has_heave() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ins::clear_heave() {
  heave_ = 0;
  clear_has_heave();
}
 double Ins::heave() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.heave)
  return heave_;
}
 void Ins::set_heave(double value) {
  set_has_heave();
  heave_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.heave)
}

// optional double latitude_deg = 10;
bool Ins::has_latitude_deg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ins::set_has_latitude_deg() {
  _has_bits_[0] |= 0x00000200u;
}
void Ins::clear_has_latitude_deg() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ins::clear_latitude_deg() {
  latitude_deg_ = 0;
  clear_has_latitude_deg();
}
 double Ins::latitude_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.latitude_deg)
  return latitude_deg_;
}
 void Ins::set_latitude_deg(double value) {
  set_has_latitude_deg();
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.latitude_deg)
}

// optional double longitude_deg = 11;
bool Ins::has_longitude_deg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Ins::set_has_longitude_deg() {
  _has_bits_[0] |= 0x00000400u;
}
void Ins::clear_has_longitude_deg() {
  _has_bits_[0] &= ~0x00000400u;
}
void Ins::clear_longitude_deg() {
  longitude_deg_ = 0;
  clear_has_longitude_deg();
}
 double Ins::longitude_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.longitude_deg)
  return longitude_deg_;
}
 void Ins::set_longitude_deg(double value) {
  set_has_longitude_deg();
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.longitude_deg)
}

// optional double altitude = 12;
bool Ins::has_altitude() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Ins::set_has_altitude() {
  _has_bits_[0] |= 0x00000800u;
}
void Ins::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000800u;
}
void Ins::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
 double Ins::altitude() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.altitude)
  return altitude_;
}
 void Ins::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Ins.altitude)
}

// optional .gazebo.msgs.Vector3d position = 13;
bool Ins::has_position() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Ins::set_has_position() {
  _has_bits_[0] |= 0x00001000u;
}
void Ins::clear_has_position() {
  _has_bits_[0] &= ~0x00001000u;
}
void Ins::clear_position() {
  if (position_ != NULL) position_->::gazebo::msgs::Vector3d::Clear();
  clear_has_position();
}
const ::gazebo::msgs::Vector3d& Ins::position() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::gazebo::msgs::Vector3d* Ins::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.position)
  return position_;
}
::gazebo::msgs::Vector3d* Ins::release_position() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.position)
  clear_has_position();
  ::gazebo::msgs::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
void Ins::set_allocated_position(::gazebo::msgs::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.position)
}

// optional .gazebo.msgs.Vector3d linear_accel = 14;
bool Ins::has_linear_accel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Ins::set_has_linear_accel() {
  _has_bits_[0] |= 0x00002000u;
}
void Ins::clear_has_linear_accel() {
  _has_bits_[0] &= ~0x00002000u;
}
void Ins::clear_linear_accel() {
  if (linear_accel_ != NULL) linear_accel_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_accel();
}
const ::gazebo::msgs::Vector3d& Ins::linear_accel() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Ins.linear_accel)
  return linear_accel_ != NULL ? *linear_accel_ : *default_instance_->linear_accel_;
}
::gazebo::msgs::Vector3d* Ins::mutable_linear_accel() {
  set_has_linear_accel();
  if (linear_accel_ == NULL) {
    linear_accel_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Ins.linear_accel)
  return linear_accel_;
}
::gazebo::msgs::Vector3d* Ins::release_linear_accel() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Ins.linear_accel)
  clear_has_linear_accel();
  ::gazebo::msgs::Vector3d* temp = linear_accel_;
  linear_accel_ = NULL;
  return temp;
}
void Ins::set_allocated_linear_accel(::gazebo::msgs::Vector3d* linear_accel) {
  delete linear_accel_;
  linear_accel_ = linear_accel;
  if (linear_accel) {
    set_has_linear_accel();
  } else {
    clear_has_linear_accel();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Ins.linear_accel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ds_sim

// @@protoc_insertion_point(global_scope)
