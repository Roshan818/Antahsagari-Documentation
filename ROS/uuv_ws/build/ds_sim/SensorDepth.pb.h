// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorDepth.proto

#ifndef PROTOBUF_SensorDepth_2eproto__INCLUDED
#define PROTOBUF_SensorDepth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
// @@protoc_insertion_point(includes)

namespace ds_sim {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_SensorDepth_2eproto();
void protobuf_AssignDesc_SensorDepth_2eproto();
void protobuf_ShutdownFile_SensorDepth_2eproto();

class PressureDepth;

// ===================================================================

class PressureDepth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ds_sim.msgs.PressureDepth) */ {
 public:
  PressureDepth();
  virtual ~PressureDepth();

  PressureDepth(const PressureDepth& from);

  inline PressureDepth& operator=(const PressureDepth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PressureDepth& default_instance();

  void Swap(PressureDepth* other);

  // implements Message ----------------------------------------------

  inline PressureDepth* New() const { return New(NULL); }

  PressureDepth* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PressureDepth& from);
  void MergeFrom(const PressureDepth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PressureDepth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  const ::gazebo::msgs::Time& stamp() const;
  ::gazebo::msgs::Time* mutable_stamp();
  ::gazebo::msgs::Time* release_stamp();
  void set_allocated_stamp(::gazebo::msgs::Time* stamp);

  // required double depth = 2;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  double depth() const;
  void set_depth(double value);

  // required double pressure_dbar = 3;
  bool has_pressure_dbar() const;
  void clear_pressure_dbar();
  static const int kPressureDbarFieldNumber = 3;
  double pressure_dbar() const;
  void set_pressure_dbar(double value);

  // required double latitude_deg = 4;
  bool has_latitude_deg() const;
  void clear_latitude_deg();
  static const int kLatitudeDegFieldNumber = 4;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // @@protoc_insertion_point(class_scope:ds_sim.msgs.PressureDepth)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_pressure_dbar();
  inline void clear_has_pressure_dbar();
  inline void set_has_latitude_deg();
  inline void clear_has_latitude_deg();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Time* stamp_;
  double depth_;
  double pressure_dbar_;
  double latitude_deg_;
  friend void  protobuf_AddDesc_SensorDepth_2eproto();
  friend void protobuf_AssignDesc_SensorDepth_2eproto();
  friend void protobuf_ShutdownFile_SensorDepth_2eproto();

  void InitAsDefaultInstance();
  static PressureDepth* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PressureDepth

// required .gazebo.msgs.Time stamp = 1;
inline bool PressureDepth::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PressureDepth::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PressureDepth::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PressureDepth::clear_stamp() {
  if (stamp_ != NULL) stamp_->::gazebo::msgs::Time::Clear();
  clear_has_stamp();
}
inline const ::gazebo::msgs::Time& PressureDepth::stamp() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.PressureDepth.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::gazebo::msgs::Time* PressureDepth::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.PressureDepth.stamp)
  return stamp_;
}
inline ::gazebo::msgs::Time* PressureDepth::release_stamp() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.PressureDepth.stamp)
  clear_has_stamp();
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void PressureDepth::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.PressureDepth.stamp)
}

// required double depth = 2;
inline bool PressureDepth::has_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PressureDepth::set_has_depth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PressureDepth::clear_has_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PressureDepth::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline double PressureDepth::depth() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.PressureDepth.depth)
  return depth_;
}
inline void PressureDepth::set_depth(double value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.PressureDepth.depth)
}

// required double pressure_dbar = 3;
inline bool PressureDepth::has_pressure_dbar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PressureDepth::set_has_pressure_dbar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PressureDepth::clear_has_pressure_dbar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PressureDepth::clear_pressure_dbar() {
  pressure_dbar_ = 0;
  clear_has_pressure_dbar();
}
inline double PressureDepth::pressure_dbar() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.PressureDepth.pressure_dbar)
  return pressure_dbar_;
}
inline void PressureDepth::set_pressure_dbar(double value) {
  set_has_pressure_dbar();
  pressure_dbar_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.PressureDepth.pressure_dbar)
}

// required double latitude_deg = 4;
inline bool PressureDepth::has_latitude_deg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PressureDepth::set_has_latitude_deg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PressureDepth::clear_has_latitude_deg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PressureDepth::clear_latitude_deg() {
  latitude_deg_ = 0;
  clear_has_latitude_deg();
}
inline double PressureDepth::latitude_deg() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.PressureDepth.latitude_deg)
  return latitude_deg_;
}
inline void PressureDepth::set_latitude_deg(double value) {
  set_has_latitude_deg();
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.PressureDepth.latitude_deg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ds_sim

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SensorDepth_2eproto__INCLUDED
