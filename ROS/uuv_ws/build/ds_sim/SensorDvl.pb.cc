// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorDvl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SensorDvl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ds_sim {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Dvl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dvl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SensorDvl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SensorDvl_2eproto() {
  protobuf_AddDesc_SensorDvl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SensorDvl.proto");
  GOOGLE_CHECK(file != NULL);
  Dvl_descriptor_ = file->message_type(0);
  static const int Dvl_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, linear_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, range_velocities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, num_beams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, unit_vectors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, orientation_),
  };
  Dvl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Dvl_descriptor_,
      Dvl::default_instance_,
      Dvl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, _has_bits_[0]),
      -1,
      -1,
      sizeof(Dvl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SensorDvl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Dvl_descriptor_, &Dvl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SensorDvl_2eproto() {
  delete Dvl::default_instance_;
  delete Dvl_reflection_;
}

void protobuf_AddDesc_SensorDvl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_SensorDvl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_quaternion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SensorDvl.proto\022\013ds_sim.msgs\032\ntime.pro"
    "to\032\016vector3d.proto\032\020quaternion.proto\"\357\001\n"
    "\003Dvl\022 \n\005stamp\030\001 \002(\0132\021.gazebo.msgs.Time\022."
    "\n\017linear_velocity\030\002 \002(\0132\025.gazebo.msgs.Ve"
    "ctor3d\022\016\n\006ranges\030\003 \003(\001\022\030\n\020range_velociti"
    "es\030\004 \003(\001\022\021\n\tnum_beams\030\005 \002(\005\022+\n\014unit_vect"
    "ors\030\006 \003(\0132\025.gazebo.msgs.Vector3d\022,\n\013orie"
    "ntation\030\007 \001(\0132\027.gazebo.msgs.Quaternion", 318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorDvl.proto", &protobuf_RegisterTypes);
  Dvl::default_instance_ = new Dvl();
  Dvl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SensorDvl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SensorDvl_2eproto {
  StaticDescriptorInitializer_SensorDvl_2eproto() {
    protobuf_AddDesc_SensorDvl_2eproto();
  }
} static_descriptor_initializer_SensorDvl_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dvl::kStampFieldNumber;
const int Dvl::kLinearVelocityFieldNumber;
const int Dvl::kRangesFieldNumber;
const int Dvl::kRangeVelocitiesFieldNumber;
const int Dvl::kNumBeamsFieldNumber;
const int Dvl::kUnitVectorsFieldNumber;
const int Dvl::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dvl::Dvl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ds_sim.msgs.Dvl)
}

void Dvl::InitAsDefaultInstance() {
  stamp_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
  linear_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  orientation_ = const_cast< ::gazebo::msgs::Quaternion*>(&::gazebo::msgs::Quaternion::default_instance());
}

Dvl::Dvl(const Dvl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ds_sim.msgs.Dvl)
}

void Dvl::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  linear_velocity_ = NULL;
  num_beams_ = 0;
  orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dvl::~Dvl() {
  // @@protoc_insertion_point(destructor:ds_sim.msgs.Dvl)
  SharedDtor();
}

void Dvl::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete linear_velocity_;
    delete orientation_;
  }
}

void Dvl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dvl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dvl_descriptor_;
}

const Dvl& Dvl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorDvl_2eproto();
  return *default_instance_;
}

Dvl* Dvl::default_instance_ = NULL;

Dvl* Dvl::New(::google::protobuf::Arena* arena) const {
  Dvl* n = new Dvl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dvl::Clear() {
// @@protoc_insertion_point(message_clear_start:ds_sim.msgs.Dvl)
  if (_has_bits_[0 / 32] & 83u) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::gazebo::msgs::Time::Clear();
    }
    if (has_linear_velocity()) {
      if (linear_velocity_ != NULL) linear_velocity_->::gazebo::msgs::Vector3d::Clear();
    }
    num_beams_ = 0;
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::gazebo::msgs::Quaternion::Clear();
    }
  }
  ranges_.Clear();
  range_velocities_.Clear();
  unit_vectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Dvl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ds_sim.msgs.Dvl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Time stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_linear_velocity;
        break;
      }

      // required .gazebo.msgs.Vector3d linear_velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_linear_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ranges;
        break;
      }

      // repeated double ranges = 3;
      case 3: {
        if (tag == 25) {
         parse_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_ranges())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ranges())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ranges;
        if (input->ExpectTag(33)) goto parse_range_velocities;
        break;
      }

      // repeated double range_velocities = 4;
      case 4: {
        if (tag == 33) {
         parse_range_velocities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_range_velocities())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_range_velocities())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_range_velocities;
        if (input->ExpectTag(40)) goto parse_num_beams;
        break;
      }

      // required int32 num_beams = 5;
      case 5: {
        if (tag == 40) {
         parse_num_beams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_beams_)));
          set_has_num_beams();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_unit_vectors;
        break;
      }

      // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
      case 6: {
        if (tag == 50) {
         parse_unit_vectors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_unit_vectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_unit_vectors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_unit_vectors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_orientation;
        break;
      }

      // optional .gazebo.msgs.Quaternion orientation = 7;
      case 7: {
        if (tag == 58) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ds_sim.msgs.Dvl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ds_sim.msgs.Dvl)
  return false;
#undef DO_
}

void Dvl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ds_sim.msgs.Dvl)
  // required .gazebo.msgs.Time stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stamp_, output);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 2;
  if (has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->linear_velocity_, output);
  }

  // repeated double ranges = 3;
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->ranges(i), output);
  }

  // repeated double range_velocities = 4;
  for (int i = 0; i < this->range_velocities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->range_velocities(i), output);
  }

  // required int32 num_beams = 5;
  if (has_num_beams()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_beams(), output);
  }

  // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
  for (unsigned int i = 0, n = this->unit_vectors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->unit_vectors(i), output);
  }

  // optional .gazebo.msgs.Quaternion orientation = 7;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ds_sim.msgs.Dvl)
}

::google::protobuf::uint8* Dvl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ds_sim.msgs.Dvl)
  // required .gazebo.msgs.Time stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stamp_, false, target);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 2;
  if (has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->linear_velocity_, false, target);
  }

  // repeated double ranges = 3;
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->ranges(i), target);
  }

  // repeated double range_velocities = 4;
  for (int i = 0; i < this->range_velocities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->range_velocities(i), target);
  }

  // required int32 num_beams = 5;
  if (has_num_beams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_beams(), target);
  }

  // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
  for (unsigned int i = 0, n = this->unit_vectors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->unit_vectors(i), false, target);
  }

  // optional .gazebo.msgs.Quaternion orientation = 7;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->orientation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ds_sim.msgs.Dvl)
  return target;
}

int Dvl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ds_sim.msgs.Dvl)
  int total_size = 0;

  if (has_stamp()) {
    // required .gazebo.msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);
  }

  if (has_linear_velocity()) {
    // required .gazebo.msgs.Vector3d linear_velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_velocity_);
  }

  if (has_num_beams()) {
    // required int32 num_beams = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_beams());
  }

  return total_size;
}
int Dvl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ds_sim.msgs.Dvl)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);

    // required .gazebo.msgs.Vector3d linear_velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_velocity_);

    // required int32 num_beams = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_beams());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .gazebo.msgs.Quaternion orientation = 7;
  if (has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // repeated double ranges = 3;
  {
    int data_size = 0;
    data_size = 8 * this->ranges_size();
    total_size += 1 * this->ranges_size() + data_size;
  }

  // repeated double range_velocities = 4;
  {
    int data_size = 0;
    data_size = 8 * this->range_velocities_size();
    total_size += 1 * this->range_velocities_size() + data_size;
  }

  // repeated .gazebo.msgs.Vector3d unit_vectors = 6;
  total_size += 1 * this->unit_vectors_size();
  for (int i = 0; i < this->unit_vectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unit_vectors(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dvl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ds_sim.msgs.Dvl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Dvl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Dvl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ds_sim.msgs.Dvl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ds_sim.msgs.Dvl)
    MergeFrom(*source);
  }
}

void Dvl::MergeFrom(const Dvl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ds_sim.msgs.Dvl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ranges_.MergeFrom(from.ranges_);
  range_velocities_.MergeFrom(from.range_velocities_);
  unit_vectors_.MergeFrom(from.unit_vectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::gazebo::msgs::Time::MergeFrom(from.stamp());
    }
    if (from.has_linear_velocity()) {
      mutable_linear_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_velocity());
    }
    if (from.has_num_beams()) {
      set_num_beams(from.num_beams());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::gazebo::msgs::Quaternion::MergeFrom(from.orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Dvl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ds_sim.msgs.Dvl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dvl::CopyFrom(const Dvl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ds_sim.msgs.Dvl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dvl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_linear_velocity()) {
    if (!this->linear_velocity_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->unit_vectors())) return false;
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void Dvl::Swap(Dvl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dvl::InternalSwap(Dvl* other) {
  std::swap(stamp_, other->stamp_);
  std::swap(linear_velocity_, other->linear_velocity_);
  ranges_.UnsafeArenaSwap(&other->ranges_);
  range_velocities_.UnsafeArenaSwap(&other->range_velocities_);
  std::swap(num_beams_, other->num_beams_);
  unit_vectors_.UnsafeArenaSwap(&other->unit_vectors_);
  std::swap(orientation_, other->orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dvl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dvl_descriptor_;
  metadata.reflection = Dvl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dvl

// required .gazebo.msgs.Time stamp = 1;
bool Dvl::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dvl::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Dvl::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dvl::clear_stamp() {
  if (stamp_ != NULL) stamp_->::gazebo::msgs::Time::Clear();
  clear_has_stamp();
}
const ::gazebo::msgs::Time& Dvl::stamp() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
::gazebo::msgs::Time* Dvl::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Dvl.stamp)
  return stamp_;
}
::gazebo::msgs::Time* Dvl::release_stamp() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Dvl.stamp)
  clear_has_stamp();
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
void Dvl::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Dvl.stamp)
}

// required .gazebo.msgs.Vector3d linear_velocity = 2;
bool Dvl::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dvl::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void Dvl::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dvl::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_velocity();
}
const ::gazebo::msgs::Vector3d& Dvl::linear_velocity() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_ : *default_instance_->linear_velocity_;
}
::gazebo::msgs::Vector3d* Dvl::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Dvl.linear_velocity)
  return linear_velocity_;
}
::gazebo::msgs::Vector3d* Dvl::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Dvl.linear_velocity)
  clear_has_linear_velocity();
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
void Dvl::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Dvl.linear_velocity)
}

// repeated double ranges = 3;
int Dvl::ranges_size() const {
  return ranges_.size();
}
void Dvl::clear_ranges() {
  ranges_.Clear();
}
 double Dvl::ranges(int index) const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.ranges)
  return ranges_.Get(index);
}
 void Dvl::set_ranges(int index, double value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Dvl.ranges)
}
 void Dvl::add_ranges(double value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:ds_sim.msgs.Dvl.ranges)
}
 const ::google::protobuf::RepeatedField< double >&
Dvl::ranges() const {
  // @@protoc_insertion_point(field_list:ds_sim.msgs.Dvl.ranges)
  return ranges_;
}
 ::google::protobuf::RepeatedField< double >*
Dvl::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ds_sim.msgs.Dvl.ranges)
  return &ranges_;
}

// repeated double range_velocities = 4;
int Dvl::range_velocities_size() const {
  return range_velocities_.size();
}
void Dvl::clear_range_velocities() {
  range_velocities_.Clear();
}
 double Dvl::range_velocities(int index) const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.range_velocities)
  return range_velocities_.Get(index);
}
 void Dvl::set_range_velocities(int index, double value) {
  range_velocities_.Set(index, value);
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Dvl.range_velocities)
}
 void Dvl::add_range_velocities(double value) {
  range_velocities_.Add(value);
  // @@protoc_insertion_point(field_add:ds_sim.msgs.Dvl.range_velocities)
}
 const ::google::protobuf::RepeatedField< double >&
Dvl::range_velocities() const {
  // @@protoc_insertion_point(field_list:ds_sim.msgs.Dvl.range_velocities)
  return range_velocities_;
}
 ::google::protobuf::RepeatedField< double >*
Dvl::mutable_range_velocities() {
  // @@protoc_insertion_point(field_mutable_list:ds_sim.msgs.Dvl.range_velocities)
  return &range_velocities_;
}

// required int32 num_beams = 5;
bool Dvl::has_num_beams() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dvl::set_has_num_beams() {
  _has_bits_[0] |= 0x00000010u;
}
void Dvl::clear_has_num_beams() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dvl::clear_num_beams() {
  num_beams_ = 0;
  clear_has_num_beams();
}
 ::google::protobuf::int32 Dvl::num_beams() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.num_beams)
  return num_beams_;
}
 void Dvl::set_num_beams(::google::protobuf::int32 value) {
  set_has_num_beams();
  num_beams_ = value;
  // @@protoc_insertion_point(field_set:ds_sim.msgs.Dvl.num_beams)
}

// repeated .gazebo.msgs.Vector3d unit_vectors = 6;
int Dvl::unit_vectors_size() const {
  return unit_vectors_.size();
}
void Dvl::clear_unit_vectors() {
  unit_vectors_.Clear();
}
const ::gazebo::msgs::Vector3d& Dvl::unit_vectors(int index) const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.unit_vectors)
  return unit_vectors_.Get(index);
}
::gazebo::msgs::Vector3d* Dvl::mutable_unit_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Dvl.unit_vectors)
  return unit_vectors_.Mutable(index);
}
::gazebo::msgs::Vector3d* Dvl::add_unit_vectors() {
  // @@protoc_insertion_point(field_add:ds_sim.msgs.Dvl.unit_vectors)
  return unit_vectors_.Add();
}
::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
Dvl::mutable_unit_vectors() {
  // @@protoc_insertion_point(field_mutable_list:ds_sim.msgs.Dvl.unit_vectors)
  return &unit_vectors_;
}
const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
Dvl::unit_vectors() const {
  // @@protoc_insertion_point(field_list:ds_sim.msgs.Dvl.unit_vectors)
  return unit_vectors_;
}

// optional .gazebo.msgs.Quaternion orientation = 7;
bool Dvl::has_orientation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dvl::set_has_orientation() {
  _has_bits_[0] |= 0x00000040u;
}
void Dvl::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dvl::clear_orientation() {
  if (orientation_ != NULL) orientation_->::gazebo::msgs::Quaternion::Clear();
  clear_has_orientation();
}
const ::gazebo::msgs::Quaternion& Dvl::orientation() const {
  // @@protoc_insertion_point(field_get:ds_sim.msgs.Dvl.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::gazebo::msgs::Quaternion* Dvl::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::gazebo::msgs::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:ds_sim.msgs.Dvl.orientation)
  return orientation_;
}
::gazebo::msgs::Quaternion* Dvl::release_orientation() {
  // @@protoc_insertion_point(field_release:ds_sim.msgs.Dvl.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Dvl::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:ds_sim.msgs.Dvl.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ds_sim

// @@protoc_insertion_point(global_scope)
